Is there a real distinction between software and hardware or is it just semantic?

Why and how has white male fragility been central to the development of technology?

How often do you notice your computer or smartphone?

What are some activities in your life that are determined by what your smartphone/computer is able to do?

Think of your friends and family, if they were the designers of computer technology what would it do/look like?


Have all users of computers always been programmers? Is the act of using a computer and moving things around and creating files and media via a computer a form of programming, even if it isn't done in a formal higher programming language? Based the article, and "Importantly, programmers are users: they create programs using editors, which are themselves software programs. The distinction between programmers and users is gradually eroding, not only because users are becoming programmers (in a real sense programmers no longer program a computer; they code), but also because, with high- level languages, programmers are becoming more like simple users." (pg 38) it seems like as software develops, or perhaps has already developed, that all users are programmers. "The current commonsense computer science definition of software is a “set of instructions that direct a computer to do a specific task.” (pg 28) seems to imply that while writing a word document isn't necessarily higher level programming, it's still programing in the sense that you are writing out some sort of contents, and then by opening the file telling the computer to read the contents of the file, which could be interpreted as programming.

An incredibly large amount of what I do is determined by what my smartphone and computer are able to do. Two of the biggest uses are navigation and accessibility to weather information in the palm of my hands.  I would say I sometimes even use mapping features when I know exactly how to get to where I'm going, just to check whether there's an alternative route that seems to be faster. None of these are strictly determined by a smartphone, in that I could use a physical map in theory, but phsyical maps don't have realtime data about traffic or road closures or parades, and I think my ability to navigate and traverse a city is heavily dependent on mapping programs. In a similar vein, as a "programmer" I think I am constantly aware of my computer or smartphone. They are the means by which I do almost all forms of work, and devices that I interact with probably 12 hours a day. 

It's super interesting that in the past computing wasn't always seen as a worthy scientific pursuit (pg 32) since nowadays it is seen as a pretty integral scientific pursuit, and how white male fragility has played into that. The article implies that females were more or less the original programmers, and that once it shifted from a clerical task it also shifted away from being a female trajectory. Edwards' comment about computers not simply embodying masculinity, but as culturally constructed as masculine mental objects, is quite literally contrary to the fact that women were at the forefront of programming until it seems men felt threatened by women emerging as the leaders of a field that combined both technical and leadership skills into a means of automating otherwise tedious processes. I think also the distinction between hardware and software, where hardware is the tangible and software is the intangible, had an influence on this. When it was simply basic hardware of writing and inputing information, it seemed clerical and tedious, but when things can be automated, and languages can be written to achieve more complex outcomes, then it becomes software and thus more of a threat to white male fragility.

Something else I found incredibly interesting was the introduction of GUIs and how much that has influenced my relationship with computers. Admittedly, though I enjoy programing, I would enjoy it tremendously less if there wasn't a visual output to the code that I'm writing. There truly is such an inherent sense of gratification when typing text creates an image or causes something on your screen to happen. It is similar to cause and effect in the physical world, of say throwing a ball and hitting a target, writing code that compiles is an extremely satisfying feeling of having achieved something. 