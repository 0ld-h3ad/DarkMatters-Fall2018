{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf600
{\fonttbl\f0\fnil\fcharset0 HelveticaNeue;}
{\colortbl;\red255\green255\blue255;\red53\green53\blue53;}
{\*\expandedcolortbl;;\cssrgb\c27059\c27059\c27059;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab560
\pard\pardeftab560\slleading20\partightenfactor0

\f0\fs24 \cf2 On Software \'97 Wendy Hui Kyong Chun\
\
Overwrite. Wendy Hui Kong Chun notes that for software, the acts of reading and writing are the same, because reading necessitates writing somewhere else. I think its fair to say, beyond this, that reading necessitates 
\i over
\i0 writing somewhere else. Effacement is an essential feature of software that separates it from hardware. And, for all the words borrowed from mind in the language of software (memory, read, hold, push/pull, etc\'85) it seems conspicuous that we do not usually talk about the computer forgetting. How can we think of this in relation to the effacement of the effaced history of the women who were so central to the operation and development of the machines that we now culturally think of as essentially masculinist?\
\
We have the sense that software is a language of abstraction and with it we can record thoughts and communications that can persist in the software ether indefinitely. Ultimately, this is the great dream of many of the most influential people in Silicon Valley\'97 to escape death by becoming software. A ludicrous dream-- emails exchanged between network engineers in the 1970\'92s are already unreadable thanks to the death of the hardware they lived on. Software 
\i can 
\i0 survive hardware, but it takes a lot of work. Software dies. I wonder how much software is already dead compared to how much is currently alive?\
\
Emulation and virtual machines. Software as hardware. You can build a working cell phone inside of Minecraft. Eventually for software to survive more software needs to be built to mimic the hardware that the initial software was designed for. In a sense this is almost an overwrite of the hardware\'97but not quite! In that sense, as abstract at software gets from hardware, it ultimately is inseparable.\
\
We treat our minds and bodies like software increasingly, embodying and enacting its ideology. We are happy to emulate computers emotionally when we download onto friends, or when something doesn\'92t compute. While we obviously don\'92t want to emulate the command and control structures that cast early computing as a job for professional men and clerical women, I do wonder how we might emulate the approach of women like Grace Murray Hopper, who moved fluidly between operator and programmer, in our approach to our machines.}